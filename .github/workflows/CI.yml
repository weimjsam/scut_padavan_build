name: CI

# Controls when the action will run. 
on: 
  push:
  workflow_dispatch:

env:
  src_git: https://github.com/hanwckf/rt-n56u.git
  build_dir: /opt/rt-n56u
  images_dir: /opt/images
  ENABLED_CFG: |
    CONFIG_FIRMWARE_INCLUDE_LANG_CN
    CONFIG_FIRMWARE_INCLUDE_SFE 
    CONFIG_EXTERNAL_PA_EXTERNAL_LNA
    CONFIG_FIRMWARE_INCLUDE_OPENSSL_EC
    CONFIG_FIRMWARE_INCLUDE_EAP_PEAP
    CONFIG_FIRMWARE_INCLUDE_OPENSSH
    CONFIG_FIRMWARE_INCLUDE_NAPT66
    CONFIG_FIRMWARE_INCLUDE_VLMCSD
    CONFIG_FIRMWARE_INCLUDE_SRELAY
    CONFIG_FIRMWARE_INCLUDE_SOCAT
    CONFIG_FIRMWARE_INCLUDE_MTR
    CONFIG_FIRMWARE_INCLUDE_IPERF3
    CONFIG_FIRMWARE_INCLUDE_MINIDLNA
    CONFIG_FIRMWARE_INCLUDE_IPSET

  DISABLED_CFG: |
    CONFIG_FIRMWARE_ENABLE_USB 
    CONFIG_FIRMWARE_ENABLE_UFSD 
    CONFIG_FIRMWARE_ENABLE_FAT 
    CONFIG_FIRMWARE_ENABLE_EXFAT 
    CONFIG_FIRMWARE_ENABLE_EXT2 
    CONFIG_FIRMWARE_ENABLE_EXT3 
    CONFIG_FIRMWARE_ENABLE_EXT4 
    CONFIG_FIRMWARE_ENABLE_XFS 
    CONFIG_FIRMWARE_ENABLE_FUSE 
    CONFIG_FIRMWARE_ENABLE_SWAP 
    CONFIG_FIRMWARE_INCLUDE_UVC 
    CONFIG_FIRMWARE_INCLUDE_HID 
    CONFIG_FIRMWARE_INCLUDE_SERIAL 
    CONFIG_FIRMWARE_INCLUDE_AUDIO 
    CONFIG_FIRMWARE_INCLUDE_XFRM 
    CONFIG_FIRMWARE_INCLUDE_IMQ 
    CONFIG_FIRMWARE_INCLUDE_IFB 
    CONFIG_FIRMWARE_INCLUDE_NFSD 
    CONFIG_FIRMWARE_INCLUDE_NFSC 
    CONFIG_FIRMWARE_INCLUDE_CIFS 
    CONFIG_FIRMWARE_INCLUDE_LANG_BR 
    CONFIG_FIRMWARE_INCLUDE_LANG_CZ 
    CONFIG_FIRMWARE_INCLUDE_LANG_DA 
    CONFIG_FIRMWARE_INCLUDE_LANG_DE 
    CONFIG_FIRMWARE_INCLUDE_LANG_ES 
    CONFIG_FIRMWARE_INCLUDE_LANG_FI 
    CONFIG_FIRMWARE_INCLUDE_LANG_FR 
    CONFIG_FIRMWARE_INCLUDE_LANG_NO 
    CONFIG_FIRMWARE_INCLUDE_LANG_PL 
    CONFIG_FIRMWARE_INCLUDE_LANG_RU 
    CONFIG_FIRMWARE_INCLUDE_LANG_SV 
    CONFIG_FIRMWARE_INCLUDE_LANG_UK 
    CONFIG_FIRMWARE_INCLUDE_NTFS_3G 
    CONFIG_FIRMWARE_INCLUDE_LPRD 
    CONFIG_FIRMWARE_INCLUDE_U2EC 
    CONFIG_FIRMWARE_INCLUDE_HDPARM 
    CONFIG_FIRMWARE_INCLUDE_PARTED 
    CONFIG_FIRMWARE_INCLUDE_SMBD 
    CONFIG_FIRMWARE_INCLUDE_WINS 
    CONFIG_FIRMWARE_INCLUDE_SMBD_SYSLOG 
    CONFIG_FIRMWARE_INCLUDE_FTPD 
    CONFIG_FIRMWARE_INCLUDE_RPL2TP 
    CONFIG_FIRMWARE_INCLUDE_DROPBEAR 
    CONFIG_FIRMWARE_INCLUDE_DROPBEAR_FAST_CODE 
    CONFIG_FIRMWARE_INCLUDE_SSWAN 
    CONFIG_FIRMWARE_INCLUDE_FIREFLY 
    CONFIG_FIRMWARE_INCLUDE_TRANSMISSION 
    CONFIG_FIRMWARE_INCLUDE_TRANSMISSION_WEB 
    CONFIG_FIRMWARE_INCLUDE_ARIA 
    CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL 
    CONFIG_FIRMWARE_INCLUDE_GDUT_DRCOM 
    CONFIG_FIRMWARE_INCLUDE_MINIEAP 
    CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT 
    CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER 
    CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT 
    CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD 
    CONFIG_FIRMWARE_INCLUDE_DUMP1090 
    CONFIG_FIRMWARE_INCLUDE_RTL_SDR 
    CONFIG_FIRMWARE_INCLUDE_MENTOHUST 
    CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT 
    CONFIG_FIRMWARE_INCLUDE_SSSERVER 
    CONFIG_FIRMWARE_INCLUDE_ADBYBY 
    CONFIG_FIRMWARE_INCLUDE_FRPC 
    CONFIG_FIRMWARE_INCLUDE_FRPS 
    CONFIG_FIRMWARE_INCLUDE_TUNSAFE 
    CONFIG_FIRMWARE_INCLUDE_ALIDDNS 
    CONFIG_FIRMWARE_INCLUDE_SMARTDNS
    CONFIG_FIRMWARE_INCLUDE_LANG_UK      
    CONFIG_FIRMWARE_INCLUDE_QOS          
    CONFIG_FIRMWARE_INCLUDE_SMBD36       
    CONFIG_FIRMWARE_INCLUDE_DDNS_SSL     
    CONFIG_FIRMWARE_INCLUDE_HTTPS        
    CONFIG_FIRMWARE_INCLUDE_OPENVPN      
    CONFIG_FIRMWARE_INCLUDE_FFMPEG_NEW   
    CONFIG_FIRMWARE_INCLUDE_XUPNPD       
    CONFIG_FIRMWARE_INCLUDE_DOGCOM       
    CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS  
    CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER 
    CONFIG_FIRMWARE_INCLUDE_TTYD         
    CONFIG_FIRMWARE_INCLUDE_NANO         
    CONFIG_FIRMWARE_INCLUDE_HTOP         
    CONFIG_FIRMWARE_INCLUDE_LRZSZ        
    CONFIG_FIRMWARE_INCLUDE_CURL         
    CONFIG_FIRMWARE_INCLUDE_SFTP         
    CONFIG_FIRMWARE_INCLUDE_TCPDUMP      
    CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE  
    CONFIG_FIRMWARE_CPU_900MHZ           
    CONFIG_USB_ARCH_HAS_OHCI             
    CONFIG_USB_ARCH_HAS_EHCI             
    CONFIG_USB_ARCH_HAS_XHCI             
    CONFIG_USB_SUPPORT                   
    CONFIG_FIRMWARE_INCLUDE_WIREGUARD

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
    strategy:
      matrix:
        include:
          - build_variant: "mt7620"
            targets: "NEWIFI-MINI"
          - build_variant: "mt7621"
            targets: "K2P NEWIFI3"
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment
        run: |
          sudo apt update
          sudo apt install libtool-bin gperf python-docutils autopoint gettext zip
          mkdir -p $images_dir
          cp -f ./ReleaseNote.txt $images_dir
      - name: Clone source
        run: |
          git clone --depth=1 $src_git $build_dir
          cd $build_dir
          GIT_VERSION="$(git rev-parse --short=7 HEAD 2>/dev/null)"
          build_date="$(date +%Y%m%d)"
          echo "build_date=${build_date}" >> $GITHUB_ENV
          echo "image_suffix=${GIT_VERSION}_${build_date}" >> $GITHUB_ENV
          echo "image_name=images_${build_variant}_${GIT_VERSION}" >> $GITHUB_ENV
      - name: Run shellcheck
        run: |
          cd $build_dir
          if [ -f ./trunk/tools/shellcheck.sh ]; then sh ./trunk/tools/shellcheck.sh; fi
      - name: Prepare toolchain
        run: |
          cd $build_dir/toolchain-mipsel
          sh dl_toolchain.sh
      - name: Modify configs
        run: |
          cd $build_dir/trunk/configs/templates
          for m in $targets; do if [ -f $m.config ]; then \
          for n in $ENABLED_CFG; do sed -i "/${n}/c${n}=y" $m.config; done; \
          for n in $DISABLED_CFG; do sed -i "/${n}/c${n}=n" $m.config; done; \
          fi; done
      - name: Start build
        run: |
          cd $build_dir/trunk
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx $images_dir/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
      - name: Create archive
        if: ${{ success() }}
        run: |
          echo -e "Build Date: ${build_date}\n" >> ${images_dir}/ReleaseNote.txt
          cd $build_dir && git log -1 |tee -a ${images_dir}/ReleaseNote.txt
          cd $images_dir
          for m in $targets; do zip ${m}_${image_suffix}.zip $m.trx ReleaseNote.txt; done
          7z a -mx=9 ${image_name}.7z *.zip
      - name: Upload images to Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ env.image_name }}
          path: ${{ env.images_dir }}/${{ env.image_name }}.7z
